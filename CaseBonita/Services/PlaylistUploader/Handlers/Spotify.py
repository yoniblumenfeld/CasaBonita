import json
import webbrowser

import requests
import spotipy as sp
from spotipy.oauth2 import SpotifyClientCredentials

from CaseBonita.Services.PlaylistUploader.Handlers.Base import BaseAPIUploader
from .consts import CLIENT_ID, CLIENT_SECRET, SPOTIFY_USER_ACCESS
from .utils import insert_id_to_url


class UploadToSpotify(BaseAPIUploader):
    def __init__(self, developer_key, _songs_json_file, user_credentials):
        super(BaseAPIUploader, self).__init__(developer_key, _songs_json_file, user_credentials)

    @classmethod
    def return_developer_credentials(cls):
        credentials_manager = SpotifyClientCredentials(client_id=CLIENT_ID, client_secret=CLIENT_SECRET)
        cls.developer_key = sp.Spotify(client_credentials_manager=credentials_manager)
        return cls.developer_key

    @classmethod
    def get_tracks_id(cls, artist, track):
        track_id = cls.developer_key.search(q='artist:' + artist + ' track:' + track, type='track')
        cls.songs_json_file = cls.songs_json_file.update('track_id':track_id)
        return cls.songs_json_file

    @classmethod
    def generate_access_token(cls):
        """
        Have the user login with spotify and return the auth token generated by spotify for him.
        :return: str user token:

        Currently set access is via local server set by the beast, spotify requires a redirect URI in order to
        generate token.

        Base access is hour long.

        """
        new = 2
        webbrowser.open(SPOTIFY_USER_ACCESS, new=new)

        # TODO: Some selenium is needed here, so once the user presses the allow button it redirects him to the urI
        # specified in SPOTIFY_USER_ACCESS.
        #      Selenium would retrieve the URL, here we'll strip it and return the user's Access token.
        selenium_fetched_url: str = None
        access_token = selenium_fetched_url.strip('strip but the access token')
        return access_token  # Maybe set this as class variable.

    @classmethod
    def connect_to_user(cls, user_id):
        endpoint_url = f"https://api.spotify.com/v1/users/{user_id}/playlists"
        return endpoint_url

    @classmethod
    def create_playlist(cls, playlist_name, connection, description=None, public=True):
        body = json.dumps({
            "name": playlist_name,
            'description': description,
            'public': public
        })
        response = requests.post(url=connection,
                                 data=body,
                                 headers={"Content-Type": "application/json",
                                          "Authorization": f"Bearer {access_token}}"})
        return response

    @classmethod
    def insert_songs_to_playlist(cls, response):
        playlist_id = response.json()['id']
        url = insert_id_to_url(playlist_id=playlist_id)
        body = json.dumps({"uris": cls.songs_json_file['id']})
        response = requests.post(url=url,
                                 data=body,
                                 headers={"Content-Type": "application/json",
                                          "Authorization": f"Bearer {access_token}}})
